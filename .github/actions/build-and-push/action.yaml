name: Build and push image
description: "Builds docker image and pushes it to registry"

inputs:
  platform:
    description: "Platform for docker build"
    default: "amd64"
    required: true
  ansible_image_tag:
    description: "Image tag of ansible base image"
    default: "alpine"
    required: true
  dockerhub_token:
    description: "Docker Hub Token"
    required: true
  github_token:
    description: "Github Token"
    required: true

outputs:
  digests:
    description: "Image digests"
    value: ${{ steps.build-and-push.outputs.digest }}
  tags_amd64:
    description: "Image tags for amd64"
    value: ${{ inputs.platform == 'amd64' && format('{0}', steps.meta.outputs.tags) || '' }}
  tags_arm64:
    description: "Image tags for arm64"
    value: ${{ inputs.platform == 'arm64' && format('{0}', steps.meta.outputs.tags) || '' }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Install the cosign tool except on PR https://github.com/sigstore/cosign-installer
    - name: Install cosign
      uses: sigstore/cosign-installer@v3.2.0

    - name: Set up QEMU
      if: ${{ inputs.platform != 'amd64' }}
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ inputs.platform }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.dockerhub_username }}
        password: ${{ inputs.dockerhub_token }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.dockerhub_username }}/${{ env.image_name }}
          ghcr.io/${{ github.repository }}
        tags: |
          type=raw,value=latest,enable=${{ github.ref_name == 'main' && inputs.platform == 'amd64' }}
          type=raw,value=latest,suffix=_${{inputs.platform}},enable=${{ github.ref_name == 'main' && inputs.platform != 'amd64' }}
          type=sha

    - name: Check whether to push or not
      shell: bash
      run: |
        SHA_FILE_LOCATION=./.github/ansible-docker-digests/${{ inputs.platform }}.sha
        
        CURRENT_SHA=$(docker manifest inspect willhallonline/ansible:${{ inputs.ansible_image_tag }} \
        | jq -r 'if .manifests then .manifests[] | select(.platform.architecture == "${{ inputs.platform }}").digest else .config.digest end')
        
        if [[ $(cat "${SHA_FILE_LOCATION}") == "${CURRENT_SHA}" ]]; then
          echo "pushImage=false" >> $GITHUB_ENV
        else
          echo "pushImage=true" >> $GITHUB_ENV
          echo "${CURRENT_SHA}" > "${SHA_FILE_LOCATION}"
        fi

    - name: Commit updated sha files if present
      if: ${{ env.pushImage }}
      uses: stefanzweifel/git-auto-commit-action@v4
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        commit_message: Automated Base Image Digest Update
        commit_options: '--no-verify --signoff'
        file_pattern: './.github/ansible-docker-digests/*.sha'

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        build-args: |
          ANSIBLE_CORE_TAG=${{ inputs.ansible_image_tag }}
        platforms: linux/${{ inputs.platform }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: ${{ env.pushImage }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Sign the published Docker image
      if: ${{ env.pushImage }}
      shell: bash
      env:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      # This step uses the identity token to provision an ephemeral certificate against the sigstore community Fulcio instance.
      run: |
        echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

    - name: Set output variables
      shell: bash
      run: |
        echo "digests=${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_OUTPUT
        {
          echo 'tags_${{ inputs.platform }}<<EOF'
          echo "${{ steps.meta.outputs.tags }}"
          echo EOF
        } >> "$GITHUB_OUTPUT"
